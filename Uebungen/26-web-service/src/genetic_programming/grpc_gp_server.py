# gRPC server implementation of mathfunc.proto
# This server uses a linear regression for fitting data

import sys
from concurrent import futures
import logging

# install packages grpcio and grpcio-tools
import grpc

# class information generated by proto compiler
import mathfunc_pb2
# method information generated by proto compiler
import mathfunc_pb2_grpc

from configuration import Configuration
import db_gp as db
from FGuesserGP import FGuesserGP

DEFAULT_CONFIG = {
    'HOST': '0.0.0.0',
    'DEBUG': 'False',
    "GRPCPORT": "50052",
    "DEBUG": "False",
    "SERVER": "md2c0gdc"
}

# read configuration
def init_config(args):
    # load configuration
    config=Configuration(DEFAULT_CONFIG)
    config.read_configfiles()
    #This is to add custom args in terminal. They will be added to config then
    config.parse_args(args)
    logging.info('Using config: %s', config.get_config_dict())
    return config

config=init_config(sys.argv[1:])

# implement MathFuncServicer
class MathFuncServicer(mathfunc_pb2_grpc.MathFuncServicer):
    def __init__(self) -> None:
        pass

    # interface defined in proto file
    def GuessFunction(self, request, context):
        fc=FGuesserGP()
        state=fc.guess_gp(config,request.id)
        return state

    # interface defined in proto file
    def Delete(self, request, context):
        db.delete_fitted(config)
        return mathfunc_pb2.DelState()

def serve():
    # instantiate the grpc server
    server=grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    mathfunc_pb2_grpc.add_MathFuncServicer_to_server(MathFuncServicer(),server)
    # open port for communication
    server.add_insecure_port('[::]:'+config['GRPCPORT'])
    server.start()
    server.wait_for_termination()

if __name__ == '__main__':
    # create databases
    if db.create_db(config):
        print('Created databases for service genetic programming')
    logging.basicConfig()
    serve()
