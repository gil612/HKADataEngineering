# # get random lecturer information (as defined in student.proto)
# def get_student_random():
#     lecturers=student_pb2.Lecturer(
#         name=student_pb2.Name(
#             surname=fake.name(),
#             givenname=fake.name()
#         ),
#         faculty=student_pb2.Faculty(facultyname=3),
#         yearOfBirth=fake.random_int(min=17,max=35,step=1)
#     )
#     return student
# from faker import Faker
# fake=Faker()
# s = fake.name()
# print(s) 

from bs4 import BeautifulSoup
import requests
page = requests.get("https://www.meinprof.de/unis/baden-wuerttemberg/hs-karlsruhe")
soup = BeautifulSoup(page.content, 'html.parser')
# print(list(soup.children))
lis = [type(item) for item in list(soup.children)]
html = list(soup.children)[2]
body = list(html.children)[3]
# print(body)
# print(soup.find_all('tbody')[0].get_text())
# print(soup.find_all('tbody')[0].get_text()[12098])
# print(soup.find_all('tr'))

# c = 0
# for a in soup.find_all('td', title =True):
#     print(a['title'])
#     c += 1
lecs = [a['title'] for a in soup.find_all('td', title =True)]    

import pandas as pd
df1 = pd.DataFrame({'title' : lecs})
df1.to_csv("lecs.csv", index = False)
print(df1)

# d = {'surname':['KÃ¼ppers','Hoffman','Janka'], 'givenname':['Peer','Reimar','Dennis']}

# df2 = pd.DataFrame(data=d)
# print(df2)
# df2.to_csv("sem3.csv")

# c= 0
# for a in soup.find_all('td'):
#     if ((c % 5) == 4):
#       print(c, a)    
      
#     c += 1

















# """Python implementation of the student server"""

# from concurrent import futures
# import logging

# # Faker creates random names, ...
# from faker import Faker
# # install packages grpcio and grpcio-tools
# import grpc
# from student_pb2 import Lecturer
# # class information generated by proto compiler
# import student_pb2
# # method information generated by proto compiler
# import student_pb2_grpc
# import pandas as pd

# fake=Faker()

# # read students of faculty WI-IWI from csv-file
# def read_students_database()->pd.DataFrame:
#     df=pd.read_csv('src\python\students.csv',delimiter=';')
#     df['facultyname']=student_pb2.Faculty.FacultyName.InformatikWirtschaftsinformatik
#     return df


# # read lecturers of faculty WI-IWI from csv-file
# def read_lecs_database()->pd.DataFrame:
#     dfl=pd.read_csv('src\python\sem3.csv')
#     dfl['title']=student_pb2.Lecturer
#     return dfl  

# # check whether student exists and return information from dataframe
# def get_student(students_db,name:student_pb2.Name):
#     # filter dataframe by surname and givenname
#     df=students_db[(students_db['surname'] == name.surname) & (students_db['givenname'] == name.givenname) ]
#     # check whether student exists
#     if df.shape[0]>0:
#         # create student information (as defined in student.proto)
#         student=student_pb2.Student(
#             name=name,
#             faculty=student_pb2.Faculty(facultyname=3),
#             yearOfBirth=fake.random_int(min=17,max=35,step=1),
#             exists=True
#         )
#         return student
#     else:
#         # student does not exist
#         # create student information (as defined in student.proto)
#         return student_pb2.Student(
#             name=name,
#             faculty=student_pb2.Faculty(facultyname=0),
#             yearOfBirth=0,
#             exists=False
#         )


# # check whether student exists and return information from dataframe
# def get_lecturer(lecturer_db,name:student_pb2.Name):
#     # filter dataframe by surname and givenname
#     df=lecturer_db[(lecturer_db['surname'] == name.surname) & (lecturer_db['givenname'] == name.givenname) ]
#     # check whether student exists
#     if df.shape[0]>0:
#         # create student information (as defined in student.proto)
#         lecturer=student_pb2.Lecturer(
#             name=name,
#             faculty=student_pb2.Faculty(facultyname=3),
#             yearOfBirth=fake.random_int(min=30,max=90,step=1),
#             exists=True
#         )
#         return lecturer
#     else:
#         # student does not exist
#         # create student information (as defined in student.proto)
#         return student_pb2.Lecturer(
#             name=name,
#             faculty=student_pb2.Faculty(facultyname=0),
#             yearOfBirth=0,
#             exists=False
#         )

# # get random student information (as defined in student.proto)
# def get_student_random():
#     student=student_pb2.Student(
#         name=student_pb2.Name(
#             surname=fake.name(),
#             givenname=fake.name()
#         ),
#         faculty=student_pb2.Faculty(facultyname=3),
#         yearOfBirth=fake.random_int(min=17,max=35,step=1)
#     )
#     return student

# # get random student information (as defined in student.proto)
# def get_lecturer_random():
#     lecturer=student_pb2.Student(
#         name=student_pb2.Name(
#             surname=fake.name(),
#             givenname=fake.name()
#         ),
#         faculty=student_pb2.Faculty(facultyname=3),
#         yearOfBirth=fake.random_int(min=30,max=90,step=1)
#     )
#     return lecturer    


# # # get random lecturer information (as defined in student.proto)
# # def get_lec():
# #     lecturers=student_pb2.Lecturer(
# #         name=student_pb2.Name(
# #             surname=fake.name(),
# #             givenname=fake.name()
# #         ),

# #     )
# #     return lecturers       

# # implement StudentsServicer (service Students as defined in student.proto)
# class StudentServicer(student_pb2_grpc.StudentsServicer):
#     def __init__(self):
#         self.students_db=read_students_database()
#         self.lecs_db=read_lecs_database()

#     # interface defined in proto file
#     def ListStudent(self, request, context):
#         # get information about student from dataframe
#         student=get_student(self.students_db,request)
#         return student

#         # interface defined in proto file
#     def ListLecturer(self, request, context):
#         # get information about student from dataframe
#         lecturer = get_lecturer(self.lecs_db,request)
#         return lecturer   

#     # interface defined in proto file
#     # parameter request contains the faculty
#     def ListStudents(self, request, context):
#         # create random information and stream for ever if no faculty is specified
#         if request.facultyname==student_pb2.Faculty.FacultyName.Unspecified:
#             while(True):
#                 yield get_student_random()
#         else:
#             # search in dataframe students_db for students that belong to the specified faculty
#             df=self.students_db[self.students_db['facultyname']==request.facultyname]
#             for index,row in df.iterrows():
#                 # create student information (as defined in student.proto)
#                 student=student_pb2.Student(
#                     name=student_pb2.Name(
#                         surname=row['surname'],
#                         givenname=row['givenname']
#                     ),
#                     faculty=request, # student_pb2.Faculty(facultyname=3),
#                     yearOfBirth=fake.random_int(min=17,max=35,step=1),
#                     exists=True
#                 )
#                 yield student


#     # interface defined in proto file
#     # parameter request contains the faculty
#     def ListLecturers(self, request, context):
#         # create random information and stream for ever if no faculty is specified
#         if request.facultyname==student_pb2.Faculty.FacultyName.Unspecified:
#             while(True):
#                 yield get_lecturer_random()
#         else:
#             # search in dataframe students_db for students that belong to the specified faculty
#             df=self.students_db[self.students_db['facultyname']==request.facultyname]
#             for index,row in df.iterrows():
#                 # create student information (as defined in student.proto)
#                 lecturer=student_pb2.Lecturer(
#                     name=student_pb2.Name(
#                         surname=row['surname'],
#                         givenname=row['givenname']
#                     ),
#                     faculty=request, # student_pb2.Faculty(facultyname=3),
#                     yearOfBirth=fake.random_int(min=30,max=90,step=1),
#                     exists=True
#                 )
#                 yield lecturer          
    
# def serve():
#     # instantiate the grpc server
#     server=grpc.server(futures.ThreadPoolExecutor(max_workers=10))
#     student_pb2_grpc.add_StudentsServicer_to_server(StudentServicer(),server)
#     # open port for communication
#     server.add_insecure_port('[::]:50051')
#     server.start()
#     server.wait_for_termination()

# if __name__ == '__main__':
#     logging.basicConfig()
#     serve()