# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import student_pb2 as student__pb2


class StudentsStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListStudent = channel.unary_unary(
                '/Students/ListStudent',
                request_serializer=student__pb2.Name.SerializeToString,
                response_deserializer=student__pb2.Student.FromString,
                )
        self.ListStudents = channel.unary_stream(
                '/Students/ListStudents',
                request_serializer=student__pb2.Faculty.SerializeToString,
                response_deserializer=student__pb2.Student.FromString,
                )
        self.ListLecturers = channel.unary_stream(
                '/Students/ListLecturers',
                request_serializer=student__pb2.Faculty.SerializeToString,
                response_deserializer=student__pb2.Lecturer.FromString,
                )


class StudentsServicer(object):
    """Interface exported by the server
    """

    def ListStudent(self, request, context):
        """method accepts the name of a student and returns an instance of Student (including full information)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStudents(self, request, context):
        """method accepts the faculty and returns all students as a stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLecturers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StudentsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListStudent': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStudent,
                    request_deserializer=student__pb2.Name.FromString,
                    response_serializer=student__pb2.Student.SerializeToString,
            ),
            'ListStudents': grpc.unary_stream_rpc_method_handler(
                    servicer.ListStudents,
                    request_deserializer=student__pb2.Faculty.FromString,
                    response_serializer=student__pb2.Student.SerializeToString,
            ),
            'ListLecturers': grpc.unary_stream_rpc_method_handler(
                    servicer.ListLecturers,
                    request_deserializer=student__pb2.Faculty.FromString,
                    response_serializer=student__pb2.Lecturer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Students', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Students(object):
    """Interface exported by the server
    """

    @staticmethod
    def ListStudent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Students/ListStudent',
            student__pb2.Name.SerializeToString,
            student__pb2.Student.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStudents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Students/ListStudents',
            student__pb2.Faculty.SerializeToString,
            student__pb2.Student.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLecturers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Students/ListLecturers',
            student__pb2.Faculty.SerializeToString,
            student__pb2.Lecturer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
